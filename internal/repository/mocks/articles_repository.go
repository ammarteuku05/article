// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	dto "articles/shared/dto"
	context "context"

	entity "articles/internal/entity"

	mock "github.com/stretchr/testify/mock"
)

// ArticlesRepository is an autogenerated mock type for the ArticlesRepository type
type ArticlesRepository struct {
	mock.Mock
}

// GetAllArticles provides a mock function with given fields: ctx, query
func (_m *ArticlesRepository) GetAllArticles(ctx context.Context, query *dto.QueryGetArticle) (*[]dto.ResponseGetArticles, int, error) {
	ret := _m.Called(ctx, query)

	if len(ret) == 0 {
		panic("no return value specified for GetAllArticles")
	}

	var r0 *[]dto.ResponseGetArticles
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.QueryGetArticle) (*[]dto.ResponseGetArticles, int, error)); ok {
		return rf(ctx, query)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dto.QueryGetArticle) *[]dto.ResponseGetArticles); ok {
		r0 = rf(ctx, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]dto.ResponseGetArticles)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dto.QueryGetArticle) int); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, *dto.QueryGetArticle) error); ok {
		r2 = rf(ctx, query)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetByIdArticle provides a mock function with given fields: ctx, articleId
func (_m *ArticlesRepository) GetByIdArticle(ctx context.Context, articleId string) (*entity.Article, error) {
	ret := _m.Called(ctx, articleId)

	if len(ret) == 0 {
		panic("no return value specified for GetByIdArticle")
	}

	var r0 *entity.Article
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entity.Article, error)); ok {
		return rf(ctx, articleId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entity.Article); ok {
		r0 = rf(ctx, articleId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Article)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, articleId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertArticle provides a mock function with given fields: ctx, req
func (_m *ArticlesRepository) InsertArticle(ctx context.Context, req *entity.Article) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for InsertArticle")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Article) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateArticle provides a mock function with given fields: ctx, req
func (_m *ArticlesRepository) UpdateArticle(ctx context.Context, req *entity.Article) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for UpdateArticle")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Article) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewArticlesRepository creates a new instance of ArticlesRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewArticlesRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ArticlesRepository {
	mock := &ArticlesRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
