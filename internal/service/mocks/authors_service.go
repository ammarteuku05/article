// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	dto "articles/shared/dto"
	context "context"

	entity "articles/internal/entity"

	mock "github.com/stretchr/testify/mock"
)

// AuthorsService is an autogenerated mock type for the AuthorsService type
type AuthorsService struct {
	mock.Mock
}

// GetAllByName provides a mock function with given fields: ctx, name
func (_m *AuthorsService) GetAllByName(ctx context.Context, name string) (*[]entity.Author, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetAllByName")
	}

	var r0 *[]entity.Author
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*[]entity.Author, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *[]entity.Author); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]entity.Author)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertAuthor provides a mock function with given fields: ctx, req
func (_m *AuthorsService) InsertAuthor(ctx context.Context, req *dto.RequestAuthor) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for InsertAuthor")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.RequestAuthor) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewAuthorsService creates a new instance of AuthorsService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthorsService(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthorsService {
	mock := &AuthorsService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
